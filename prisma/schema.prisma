generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String         @id
  clerkId                  String         @unique
  email                    String?
  credits                  Int            @default(5)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  stripeCustomerId         String?        @unique
  stripeSubscriptionId     String?        @unique
  stripeSubscriptionStatus String?
  tierId                   String?
  lastManualCreditAddition DateTime?
  firstName                String?
  lastName                 String?
  searches                 Search[]
  subscriptions            Subscription[]
}

model Search {
  id        String   @id @default(cuid())
  query     String
  groupId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String
  stripeSubscriptionId String    @unique
  status               String
  priceId              String
  tierId               String
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastCreditAddedAt    DateTime?
  lastPeriodStart      DateTime?
  user                 User      @relation(fields: [userId], references: [id])
}

model StripeEvent {
  id          String   @id @default(cuid())
  eventId     String   @unique
  type        String
  processedAt DateTime @default(now())
  createdAt   DateTime @default(now())
}

model ErrorLog {
  id        String   @id @default(cuid())
  type      String
  message   String
  metadata  Json
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        String   @id @default(cuid())
  type      String
  message   String
  subject   String?
  name      String?
  email     String?
  userId    String?
  rating    Int?
  review    String?
  status    String   @default("pending")
  isReward  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([type])
}

model CreditHistory {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
}
